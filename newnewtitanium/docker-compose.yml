version: "3.3"
services:
  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      - JELLYFIN_PublishedServerUrl=100.125.70.69
      - JELLYFIN_DATA_DIR=/config/data
      - JELLYFIN_CONFIG_DIR=/config
      - JELLYFIN_LOG_DIR=/config/log
      - JELLYFIN_CACHE_DIR=/config/cache
    volumes:
      - /fast-pool/containers/jellfin:/config
      - /bigpool/Media/TV:/data/tvshows
      - /bigpool/Media/Movies:/data/movies
    ports:
      - 8096:8096
      - 8920:8920 #HTTPS
      - 7359:7359/udp #optional
      - 1900:1900/udp #optional
    devices:
      - /dev/dri:/dev/dri #intel
    restart: unless-stopped

  requestrr:
    image: thomst08/requestrr
    container_name: requestrr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - /bigpool/containers/requestrr/config:/root/config
    ports:
      - 4545:4545
    restart: unless-stopped

  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - VERSION=docker
      - PLEX_CLAIM=claim-Yzqx3dZi-zPcsHA4Yz3y #optional
    volumes:
      - /bigpool/containers/plex:/config
      - /bigpool/Media/TV:/tv
      - /bigpool/Media/Movies:/movies
    restart: unless-stopped

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      - UMASK_SET=022
    volumes:
      - /fast-pool/containers/sonarr:/config
      - /bigpool/Media:/media
      - /fast-pool/containers/sabnzbd/complete:/complete-downloads
    ports:
      - 8989:8989
    restart: unless-stopped

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      - UMASK_SET=022 #optional
    volumes:
      - /fast-pool/containers/radarr:/config
      - /bigpool/Media:/media
      - /fast-pool/containers/sabnzbd/complete:/complete-downloads
    ports:
      - 7878:7878
    restart: unless-stopped

  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      - UMASK_SET=022
    volumes:
      - /fast-pool/containers/sabnzbd:/config
      # - /bigpool/Media/DL:/media/DL
      - /fast-pool/containers/sabnzbd/incomplete:/incomplete-downloads
      - /fast-pool/containers/sabnzbd/complete:/complete-downloads
    ports:
      - 8082:8080
    restart: unless-stopped

  nginx-proxy-manager:
    image: "jc21/nginx-proxy-manager:latest"
    container_name: nginx-proxy-manager
    restart: unless-stopped
    ports:
      - "80:80"
      - "81:81"
      - "443:443"
    volumes:
      - /bigpool/containers/nginx-proxy-manager/data:/data
      - /bigpool/containers/nginx-proxy-manager/letsencrypt:/etc/letsencrypt

  scrutiny:
    container_name: scrutiny
    image: ghcr.io/analogj/scrutiny:master-omnibus
    restart: unless-stopped
    cap_add:
      - SYS_RAWIO
      - SYS_ADMIN
    ports:
      - "8083:8080" # webapp
      - "8086:8086" # influxDB admin
    volumes:
      - /run/udev:/run/udev:ro
      - /bigpool/containers/scrutiny/config:/opt/scrutiny/config
      - /bigpool/containers/scrutiny/influxdb:/opt/scrutiny/influxdb
    devices:
      - "/dev/sda"
      - "/dev/sdb"
      - "/dev/sdc"
      - "/dev/sdd"
      - "/dev/sde"
      - "/dev/sdf"
      - "/dev/sdg"
      - "/dev/sdh"
      - "/dev/nvme0"
      - "/dev/nvme1"
      - "/dev/nvme2"
      - "/dev/nvme3"

  smartctl-exporter:
    image: prometheuscommunity/smartctl-exporter
    container_name: smartctl-exporter
    privileged: true
    user: root
    ports:
      - "9633:9633"
    restart: unless-stopped

  mongodb:
    image: mongo
    container_name: mongodb
    restart: unless-stopped
    volumes:
      - /bigpool/containers/mongodb:/data/db
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: unless-stopped
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://root:password@100.125.70.69:27017/

  cribl-master:
    image: cribl/cribl:latest
    environment:
      - CRIBL_DIST_MODE=master
      - CRIBL_DIST_MASTER_URL=tcp://criblmaster@0.0.0.0:4200
      - CRIBL_VOLUME_DIR=/opt/cribl/config-volume
    ports:
      - "19000:9000"
      - "4200:4200"
    volumes:
      - "/bigpool/containers/cribl:/opt/cribl/config-volume"
    restart: unless-stopped
  cribl-workers:
    image: cribl/cribl:latest
    depends_on:
      - cribl-master
    environment:
      - CRIBL_DIST_MODE=worker
      - CRIBL_DIST_MASTER_URL=tcp://criblmaster@cribl-master:4200
    ports:
      - "10300:10300"
      - 9000
      - "9200:9200"
      - "10200:10200"
    restart: unless-stopped

  mysql:
    image: mysql:latest
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ad
    volumes:
      - /fast-pool/containers/mysql:/var/lib/mysql
    ports:
      - 3306:3306

  bitwarden:
    container_name: vaultwarden
    volumes:
      - /fast-pool/containers/vaultwarden/:/data/
    restart: unless-stopped
    ports:
      - 88:80
    image: vaultwarden/server:latest
    environment:
      - SIGNUPS_ALLOWED=false
      - DOMAIN=https://bitwarden.n1al.com
      - ADMIN_TOKEN=$$argon2id$$v=19$$m=19456,t=2,p=1$$c09HVzVnendydkNNYkNKZ3loaWNEN0l6akNEUWZjRmxYNFM2OG16U1dYMD0$$m/u1YWIHIUf3ZnA/Z/VroZ3O0e+LvylLMwqWRGiV2nk

  golink:
    container_name: golink
    volumes:
      - /fast-pool/containers/golink:/home/nonroot
    image: ghcr.io/tailscale/golink:main
    restart: unless-stopped

  portainer-ce:
    ports:
      - 8000:8000
      - 9443:9443
    container_name: portainer
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    image: portainer/portainer-ce:latest

volumes:
  portainer_data:
